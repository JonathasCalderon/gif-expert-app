{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputText","setInputText","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","fetchedGifs","map","img","id","images","downsized_medium","GifGrid","setData","loading","setLoading","useEffect","then","gifs","useFetchGifs","renderedGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAoCeA,EAjCK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAEHC,mBAAS,IAFN,mBAE9BC,EAF8B,KAEnBC,EAFmB,KAkBrC,OACI,0BAAMC,SAVW,SAAAC,GACjBA,EAAEC,iBACEJ,EAAUK,OAAOC,OAAS,IAC1BR,GAAY,SAAAS,GAAG,OAAKP,GAAL,mBAAmBO,OAClCN,EAAa,OAOb,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAnBS,SAAAP,GAAM,IACfM,EAAUN,EAAEQ,OAAZF,MACRR,EAAaQ,QCING,EAXK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAG1B,OAFAC,QAAQC,IAAIH,GAGR,yBAAKI,UAAU,QACX,yBAAKC,IAAKJ,EAAKK,IAAKN,IACpB,2BAAIA,K,uBCRHO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbR,EADa,iDACmCS,UAAUF,GAD7C,+DAEAG,MAAMV,GAFN,cAEbW,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAcD,EAAKE,KAAI,SAAAC,GAAG,YAC5B,CACIC,GAAID,EAAIC,GACRlB,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIE,cAAN,aAAE,EAAYC,iBAAiBnB,QATvB,kBAaZc,GAbY,4CAAH,sDCuBLM,EAnBC,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACdtB,mBAAS,IADK,mBAC/B4B,EAD+B,KACzBQ,EADyB,OAERpC,oBAAS,GAFD,mBAE/BqC,EAF+B,KAEtBC,EAFsB,KAYtC,OARAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAC,GACFL,EAAQK,GACRH,GAAW,QAEpB,CAAChB,IAEG,CAACM,EAAMS,GDTUK,CAAapB,GAFP,mBAEvBmB,EAFuB,KAEjBJ,EAFiB,KAIxBM,EAAeF,EAAKX,KAAI,SAAAC,GAAG,OAC7B,kBAAC,EAAD,eAAaa,IAAKb,EAAIC,IAAQD,OAGlC,OACI,oCACI,4BAAKT,GACJe,GAAW,yCACZ,yBAAKnB,UAAU,sDACVyB,KEEFE,EAfM,WAAO,IAAD,EACS7C,mBAAS,CAAC,sBADnB,mBAChBsB,EADgB,KACNvB,EADM,KAGvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,YAAaA,IAC1B,6BAEIuB,EAASQ,KAAI,SAAAtB,GAAG,OAAI,kBAAC,EAAD,CAASoC,IAAKpC,EAAKc,SAAUd,S,MCNjEsC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.f721cff2.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ setCategory }) => {\n\n    const [inputText, setInputText] = useState('')\n\n    const handleChange = e => {\n        const { value } = e.target\n        setInputText(value)\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        if (inputText.trim().length > 2) {\n            setCategory(cat => [inputText, ...cat])\n            setInputText('')\n        }\n\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputText}\n                onChange={handleChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategory: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","import React from 'react'\n\nconst GifGridItem = ({ title, url }) => {\n    console.log(title)\n\n    return (\n        <div className=\"card\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=8ZcABixTf2PTe3QuNvwSivVk9XmABNZE`\n    const resp = await fetch(url)\n    const { data } = await resp.json()\n\n    const fetchedGifs = data.map(img => (\n        {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    ))\n\n    return fetchedGifs\n}","import React from 'react'\nimport GifGridItem from './GifGridItem'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nconst GifGrid = ({ category }) => {\n\n    const [gifs, loading] = useFetchGifs(category)\n\n    const renderedGifs = gifs.map(img => (\n        <GifGridItem key={img.id} {...img} />\n    ))\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p>Loading...</p>}\n            <div className=\"card-container animate__animated animate__backInUp\">\n                {renderedGifs}\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n    const [data, setData] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        getGifs(category)\n            .then(gifs => {\n                setData(gifs)\n                setLoading(false)\n            })\n    }, [category])\n\n    return [data, loading]\n}","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () => {\n    const [category, setCategory] = useState(['Lord of The Rings'])\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategory={setCategory} />\n            <hr />\n            {\n                category.map(cat => <GifGrid key={cat} category={cat} />)\n            }\n        </>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}